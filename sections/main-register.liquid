{{ 'customer.css' | asset_url | stylesheet_tag }}

{%- style -%}
  .section-{{ section.id }}-padding {
    padding-top: {{ section.settings.padding_top | times: 0.75 | round: 0 }}px;
    padding-bottom: {{ section.settings.padding_bottom | times: 0.75 | round: 0 }}px;
  }

  @media screen and (min-width: 750px) {
    .section-{{ section.id }}-padding {
      padding-top: {{ section.settings.padding_top }}px;
      padding-bottom: {{ section.settings.padding_bottom }}px;
    }
  }
{%- endstyle -%}

<div class="customer register section-{{ section.id }}-padding">
  <h1>{{ 'customer.register.title' | t }}</h1>

  {%- form 'create_customer'
    , novalidate: 'novalidate' -%}
    {%- if form.errors -%}
      <h2
        class="form__message"
        tabindex="-1"
        autofocus>
        <span class="svg-wrapper">
          {{ 'icon-error.svg' | inline_asset_content }}
        </span>
        {{ 'templates.contact.form.error_heading' | t }}
      </h2>
      <ul>
        {%- for field in form.errors -%}
          <li>
            {%- if field == 'form' -%}
              {{ form.errors.messages[field] }}
            {%- else -%}
              <a href="#RegisterForm-{{ field }}">
                {{ form.errors.translated_fields[field] | capitalize }}
                {{ form.errors.messages[field] }}
              </a>
            {%- endif -%}
          </li>
        {%- endfor -%}
      </ul>
    {%- endif -%}

    <!-- First Name -->
    <div class="field">
      <input
        type="text"
        name="customer[first_name]"
        id="RegisterForm-FirstName"
        value="{{ form.first_name }}"
        autocomplete="given-name"
        placeholder="{{ 'customer.register.first_name' | t }}">
      <label for="RegisterForm-FirstName">
        {{ 'customer.register.first_name' | t }}
      </label>
    </div>

    <!-- Last Name -->
    <div class="field">
      <input
        type="text"
        name="customer[last_name]"
        id="RegisterForm-LastName"
        value="{{ form.last_name }}"
        autocomplete="family-name"
        placeholder="{{ 'customer.register.last_name' | t }}">
      <label for="RegisterForm-LastName">
        {{ 'customer.register.last_name' | t }}
      </label>
    </div>

    <!-- Email -->
    <div class="field">
      <input
        type="email"
        name="customer[email]"
        id="RegisterForm-email"
        value="{{ form.email }}"
        spellcheck="false"
        autocapitalize="off"
        autocomplete="email"
        aria-required="true"
        {% if form.errors contains 'email' %}
        aria-invalid="true"
        aria-describedby="RegisterForm-email-error"
        {% endif %}
        placeholder="{{ 'customer.register.email' | t }}">
      <label for="RegisterForm-email">
        {{ 'customer.register.email' | t }}
      </label>
    </div>

    {%- if form.errors contains 'email' -%}
      <span id="RegisterForm-email-error" class="form__message">
        <span class="svg-wrapper">{{ 'icon-error.svg' | inline_asset_content }}</span>
        {{ form.errors.translated_fields.email | capitalize }}
        {{ form.errors.messages.email }}.
      </span>
    {%- endif -%}

    <!-- Password -->
    <div class="field">
      <input
        type="password"
        name="customer[password]"
        id="RegisterForm-password"
        aria-required="true"
        {% if form.errors contains 'password' %}
        aria-invalid="true"
        aria-describedby="RegisterForm-password-error"
        {% endif %}
        placeholder="{{ 'customer.register.password' | t }}">
      <label for="RegisterForm-password">
        {{ 'customer.register.password' | t }}
      </label>
    </div>

    {%- if form.errors contains 'password' -%}
      <span id="RegisterForm-password-error" class="form__message">
        <span class="svg-wrapper">{{ 'icon-error.svg' | inline_asset_content }}</span>
        {{ form.errors.translated_fields.password | capitalize }}
        {{ form.errors.messages.password }}.
      </span>
    {%- endif -%}

    <!-- Birthdate Field -->
    <div class="field">
      <input
        type="date"
        name="customer[note][birthdate]"
        id="RegisterForm-Birthdate"
        placeholder="Birthdate (YYYY-MM-DD)">
      <label for="RegisterForm-Birthdate">
        Birthdate (YYYY-MM-DD)
      </label>
    </div>


    <!-- Address Field -->
    <div class="field">
      <input
        type="text"
        name="customer[note][address]"
        id="RegisterForm-Address"
        placeholder="Address">
      <label for="RegisterForm-Address">
        Address
      </label>
    </div>


    <!-- Province Field -->
    <div class="field">
      <input
        type="text"
        name="customer[note][province]"
        id="RegisterForm-province"
        placeholder="Province">
      <label for="RegisterForm-Province">
        Province
      </label>
    </div>


    <!-- District Field -->
    <div class="field">
      <input
        type="text"
        name="customer[note][district]"
        id="RegisterForm-District"
        placeholder="District">
      <label for="RegisterForm-District">
        District
      </label>
    </div>

    <!-- District Field -->
    <div class="field">
      <input
        type="text"
        name="customer[note][ward]"
        id="RegisterForm-Ward"
        placeholder="Ward">
      <label for="RegisterForm-Ward">
        Ward
      </label>
    </div>


    <!-- Hidden Note Field -->
    <input
      type="hidden"
      name="customer[note]"
      id="CustomerNoteField">

    <!-- Submit -->
    <button>
      {{ 'customer.register.submit' | t }}
    </button>
  {%- endform -%}
</div>

<!-- JavaScript to inject note data -->
<script>
  document.addEventListener('DOMContentLoaded', function () {
    const form = document.querySelector('form[action="/account"]');

    // Select all inputs whose name starts with 'customer[note]['
    const noteInputs = form.querySelectorAll('input[name^="customer[note]["]');

    // Create a hidden input to submit the compiled note
    const noteInput = document.createElement('input');
    noteInput.type = 'hidden';
    noteInput.name = 'customer[note]';
    form.appendChild(noteInput);

    form.addEventListener('submit', function () {
      const noteData = [];

      noteInputs.forEach(input => {
        const rawValue = input.value.trim();
        if (!rawValue) return;

        // Extract the key from name="customer[note][somekey]"
        const match = input.name.match(/customer\[note\]\[(.+?)\]/);
        if (!match) return;

        const key = match[1];
        let value = rawValue;

        // Format birthdate (if key is birthdate and value is a valid date)
        if (key === 'birthdate') {
          const dateObj = new Date(rawValue);
          if (!isNaN(dateObj)) {
            value = dateObj.toISOString().split('T')[0]; // YYYY-MM-DD
          }
        }

        noteData.push(`${key}: ${value}`);
      });

      noteInput.value = noteData.join(', ');
    });
  });
</script>


{% schema %}
  {
    "name": "t:sections.main-register.name",
    "settings": [
      {
        "type": "header",
        "content": "t:sections.all.padding.section_padding_heading"
      }, {
        "type": "range",
        "id": "padding_top",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_top",
        "default": 36
      }, {
        "type": "range",
        "id": "padding_bottom",
        "min": 0,
        "max": 100,
        "step": 4,
        "unit": "px",
        "label": "t:sections.all.padding.padding_bottom",
        "default": 36
      }
    ]
  }
{% endschema %}